/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.chungnh.simple.weather.view.panel;

import com.chungnh.simple.weather.data.model.Forecast;
import com.chungnh.simple.weather.data.model.ListDaily;
import com.chungnh.simple.weather.data.model.Weather;
import com.chungnh.simple.weather.utility.FormatUtil;
import com.chungnh.simple.weather.utility.ForecastUtil;
import com.chungnh.simple.weather.utility.R;
import com.chungnh.simple.weather.view.custom.RoundedPanel;
import com.chungnh.simple.weather.view.custom.WeatherInfoCardPane;

import javax.swing.border.EmptyBorder;
import java.awt.*;

/**
 * @author chungnh
 */
public class OtherWeatherInfoPane extends RoundedPanel {

    /**
     * Creates new form OtherWeatherInfoPane
     */
    public OtherWeatherInfoPane() {
        initComponents();
        setBorder(new EmptyBorder(0, 0, 10, 0));
        jLabel1.setBorder(new EmptyBorder(0, 20, 0, 0));
        pnlInfoContainer.setLayout(new GridLayout(2, 3, 20, 10));
        pnlInfoContainer.setBorder(new EmptyBorder(0, 20, 10, 20));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        pnlInfoContainer = new javax.swing.JPanel();

        setBackground(new java.awt.Color(233, 236, 239));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("Air Condition");

        pnlInfoContainer.setBackground(new java.awt.Color(233, 236, 239));
        pnlInfoContainer.setLayout(new java.awt.GridLayout(2, 2, 10, 10));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 372, Short.MAX_VALUE))
                        .addComponent(pnlInfoContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(pnlInfoContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel pnlInfoContainer;
    // End of variables declaration//GEN-END:variables

    public void setData(Weather weather) {
        pnlInfoContainer.removeAll();
        Forecast.Daily daily = weather.getForecast().getDaily();
        ListDaily.Item currentOfDaily = ForecastUtil.getCurrent(daily);
        if (currentOfDaily != null) {
            pnlInfoContainer.add(createInfo(R.Drawable.ic_uv, "UV Index", String.valueOf(currentOfDaily.getUvIndexMax())));
            pnlInfoContainer.add(createInfo(R.Drawable.ic_wind_speed, "Wind Speed", FormatUtil.formatWindySpeed(currentOfDaily.getWindSpeedMax())));
            pnlInfoContainer.add(createInfo(R.Drawable.ic_sun_clock, "Sunrise & Sunset", FormatUtil.formatSunriseAndSunset(currentOfDaily.getSunrise(), currentOfDaily.getSunset())));
            pnlInfoContainer.add(createInfo(R.Drawable.ic_rain, "Rain Sum", FormatUtil.formatMM(currentOfDaily.getRainSum())));
            pnlInfoContainer.add(createInfo(R.Drawable.ic_temperature, "Max & Min", FormatUtil.formatMaxAndMinTemperature(currentOfDaily.getTemperatureMax(), currentOfDaily.getTemperatureMin())));
        }
        Forecast.Current current = weather.getForecast().getCurrent();
        pnlInfoContainer.add(createInfo(R.Drawable.ic_humidity, "Humidity", FormatUtil.formatHumidity(current.getRelativeHumidity())));
    }

    private Component createInfo(String icon, String name, String value) {
        WeatherInfoCardPane infoCardPane = new WeatherInfoCardPane();
        infoCardPane.setIcon(icon);
        infoCardPane.setTitle(name);
        infoCardPane.setValue(value);
        return infoCardPane;
    }
}
